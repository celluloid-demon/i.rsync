#!/bin/bash

# Exit on error
set -e

LOCKFILE="/tmp/rsync-wrapper.lock"
REMOTE="jonathan@raspberry-pi"

run-rsync() {

    # Try to acquire the lock
    if mkdir "$LOCKFILE"; then

        # Lock acquired, perform rsync backup
        rsync \
                --append \
                --archive \
                --exclude *".lnk" \
                --exclude "desktop.ini" \
                --exclude "Google Drive" \
                --exclude "iCloud Drive" \
                --exclude "Images" \
                --exclude '$RECYCLE.BIN' \
                --exclude ".snapshots" \
                --exclude "System Volume Information" \
                --exclude ".Trash"* \
                --info=progress2 \
                --partial \
                "$1" \
                "$2"

        # Release the lock
        rmdir "$LOCKFILE"

    else

        # Unable to acquire the lock, a previous instance is still running

        message="Previous rsync job is still running (LOCKFILE path: ${LOCKFILE}), canceling."

        echo "$message"

        cat "$message" >> "${HOME}/Desktop/rsync-wrapper.ERROR.log"

        exit 1

    fi

}

cleanup() {

    message="Something happened, removing lockfile and terminating (try running rsync-wrapper manually to check status)..."

    echo "$message"

    cat "$message" >> "${HOME}/Desktop/rsync-wrapper.ERROR.log"

    rmdir "$LOCKFILE"

}

main() {

    trap cleanup ERR

    #############################
    #                           #
    #          EXAMPLE          #
    #                           #
    #############################

    # declare -a job=(
        
    #     FILES
        
    #     )

    # declare -A source=(

    #     [FILES]="/mnt/d/Files"

    # )

    # declare -A destination=(

    #     [FILES]="${REMOTE}:/filepacks/@files"

    # )

    # for i in "${job[@]}"; do

    #     # (NOTE: The reason you're not backing up windows files with robocopy is because you want checksums)

    #     echo
    #     echo "Source:      ${source[$i]}"
    #     echo "Destination: ${destination[$i]}"

    #     run-rsync "${source[$i]}/" "${destination[$i]}/"

    # done

    ##############################################
    #                                            #
    #          BEGIN USER CONFIGURATION          #
    #                                            #
    ##############################################

}

main
